"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[140],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(n),f=i,m=d["".concat(l,".").concat(f)]||d[f]||p[f]||a;return n?r.createElement(m,o(o({ref:t},c),{},{components:n})):r.createElement(m,o({ref:t},c))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1578:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var r=n(7462),i=(n(7294),n(3905));const a={sidebar_position:1,title:"Scripts Self-Elevation",hide_title:!0},o=void 0,s={unversionedId:"tips/script-self-elevation",id:"tips/script-self-elevation",title:"Scripts Self-Elevation",description:"Self Elevate Script",source:"@site/docs/tips/script-self-elevation.md",sourceDirName:"tips",slug:"/tips/script-self-elevation",permalink:"/gsudo/docs/tips/script-self-elevation",draft:!1,editUrl:"https://github.com/gerardog/gsudo/blob/docs/docs/docs/tips/script-self-elevation.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Scripts Self-Elevation",hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"Windows Terminal",permalink:"/gsudo/docs/tips/mixed-elevation-in-windows-terminal"},next:{title:"Troubleshooting",permalink:"/gsudo/docs/troubleshooting"}},l={},u=[{value:"Self Elevate Script",id:"self-elevate-script",level:2},{value:"Detect if running elevated",id:"detect-if-running-elevated",level:2},{value:"Detect if current user is member of admins group (regardless of current elevation status)",id:"detect-if-current-user-is-member-of-admins-group-regardless-of-current-elevation-status",level:2}],c={toc:u};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"self-elevate-script"},"Self Elevate Script"),(0,i.kt)("p",null,"You may want to create a script that always runs elevated. This template detects if the session is not elevated, then calls itself elevated using gsudo."),(0,i.kt)("p",null,"It uses ",(0,i.kt)("inlineCode",{parentName:"p"},"gsudo status")," to test if we are elevated, because alternatives such as using ",(0,i.kt)("inlineCode",{parentName:"p"},"whoami")," varies upon OS language, and ",(0,i.kt)("inlineCode",{parentName:"p"},"net session")," breaks when network is down."),(0,i.kt)("p",null,"Batch: (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"SelfElevate.bat"),")"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-batch"},'@echo off\ngsudo status | findstr /C:"Admin: True" 1> nul 2>nul && goto :IsAdmin\necho You are not admin. Elevating using gsudo.\ngsudo "%~f0" %*\nif errorlevel 999 Echo Failed to elevate.\nexit /b %errorlevel%\n\n:IsAdmin\n:: You are admin. Do admin stuff here.\n')),(0,i.kt)("p",null,"One-Line version:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-batch"},'gsudo status | findstr /C:"Admin: True" 1> nul 2>nul || gsudo "%~f0" && exit /b\n:: You are admin. Do admin stuff here.\n')),(0,i.kt)("p",null,"PowerShell: (e.g. 'SelfElevate.ps1')"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-powershell"},'function Test-IsAdmin {\n  return (New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)\n}\n\nif ((Test-IsAdmin) -eq $false) {\n Write-Warning "This script requires local admin privileges. Elevating..."\n gsudo "$($MyInvocation.MyCommand.Source)" $args\n if ($LastExitCode -eq 999 ) {\n    Write-error \'Failed to elevate.\'\n }\n return\n}\n\n# You are admin. Do admin stuff here.\n')),(0,i.kt)("h2",{id:"detect-if-running-elevated"},"Detect if running elevated"),(0,i.kt)("p",null,"PowerShell:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-powershell"},"function Test-IsAdmin {\n  return (New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)\n}\n")),(0,i.kt)("p",null,"Even when this code ",(0,i.kt)("strong",{parentName:"p"},"looks like")," it will check if the current user is member of the local admins group (regardless of current elevation status), instead it just returns ",(0,i.kt)("inlineCode",{parentName:"p"},"$true")," if elevated."),(0,i.kt)("h2",{id:"detect-if-current-user-is-member-of-admins-group-regardless-of-current-elevation-status"},"Detect if current user is member of admins group (regardless of current elevation status)"),(0,i.kt)("p",null,"If you want to know if the current user can elevate with a UAC popup but without entering other user credentials. If so, we need to check if the user is a member of S-1-5-32-544 (a.k.a. BUILTIN\\Administrators for english OS)."),(0,i.kt)("p",null,"Batch:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-batch"},"whoami /groups | findstr S-1-5-32-544 > nul\nif errorlevel 1 goto IsAdmin\necho Not Admin\nexit /b\n:IsAdmin\necho Current user is a member of the Local Admins group. But we don't know if this session is elevated.\n")),(0,i.kt)("p",null,"PowerShell:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-powershell"},'function Test-IsMemberOfLocalAdminsGroup {\n ([System.Security.Principal.WindowsIdentity]::GetCurrent()).Claims.Value -contains "S-1-5-32-544"\n}\n')))}p.isMDXComponent=!0}}]);